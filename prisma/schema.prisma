generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  MODERATOR
}

enum DepartmentType {
  SOT
  SOM
  SOH
}

enum ScoreType {
  FORTNIGHTLY_TEST
  ASSIGNMENT
  MID_SEM
  END_SEM
  INTERVIEW
}

model Center {
  id          String       @id @default(uuid())
  name        String       @unique
  location    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  departments Department[]
  students    Student[]
  teachers    Teacher[]
  admins      Admin[]      

  @@map("centers")
}

model Department {
  id          String         @id @default(uuid())
  name        DepartmentType
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  center      Center         @relation(fields: [centerId], references: [id], onDelete: Cascade)
  centerId    String

  batches     Batch[]
  students    Student[]
  teachers    Teacher[]

  @@unique([centerId, name])
  @@map("departments")
}

model Batch {
  id           String      @id @default(uuid())
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  department   Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String

  semesters    Semester[]
  students     Student[]
  teachers     Teacher[]   @relation("BatchTeachers") 

  @@unique([departmentId, name])
  @@map("batches")
}

model Semester {
  id         String     @id @default(uuid())
  number     Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  batch      Batch      @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId    String

  courses    Course[]

  @@unique([batchId, number])
  @@map("semesters")
}

model Course {
  id          String      @id @default(uuid())
  name        String
  code        String
  credits     Int         @default(3)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  semester    Semester    @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  semesterId  String

  teachers    Teacher[]   @relation("CourseTeachers")
  students    Student[]   @relation("CourseStudents")
  scores      CourseScore[]

  @@unique([semesterId, code])
  @@map("courses")
}

model Teacher {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  gender        String
  phoneNumber   String
  experience    Int

  center        Center     @relation(fields: [centerId], references: [id])
  centerId      String

  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String

  courses       Course[]   @relation("CourseTeachers")
  batches       Batch[]    @relation("BatchTeachers")  

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("teachers")
}

model Student {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  gender           String
  phoneNumber      String
  enrollmentNumber String         @unique
  password         String
  semesterNo       Int            @default(1)

  center           Center         @relation(fields: [centerId], references: [id])
  centerId         String

  department       Department     @relation(fields: [departmentId], references: [id])
  departmentId     String

  batch            Batch          @relation(fields: [batchId], references: [id])
  batchId          String

  courses          Course[]       @relation("CourseStudents")
  scores           CourseScore[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("students")
}

model CourseScore {
  id             String      @id @default(uuid())
  marksObtained  Float
  totalObtained  Float
  dateOfExam     DateTime
  scoreType      String
  name           ScoreType
  gradedAt       DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String

  course         Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String

  @@unique([studentId, courseId,scoreType])
  @@map("course_scores")
}

model Admin {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(ADMIN)

  center      Center   @relation(fields: [centerId], references: [id]) 
  centerId    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admins")
}